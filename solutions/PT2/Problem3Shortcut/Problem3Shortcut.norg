* Questions:
** Do we really need to figure out the path of each and every cow?
** If string S_1 is lexiographically *strictly* smaller than string S_2, is reverse(S_2) always lexiographically *strictly* smaller than reverse(S_1)?
*** ANSWER IS NO

* Observations:
  ** Cows that initially start at the same barn can be calculated together 

* initial ideas:
  ~ Topo sort & Tree DP
  ~ Floyd-Warshall's ?

  - (x) find out the paths of the cows to the barn
  - (x) find the node such that equation f(v) is maximized:
        $f(v) = numOfCowsThatPassThrough*distFromBarn\[v\]$

**** implement dijkstra's algorithm such that the path that node 1 takes to node v *always* makes it so that the ordering from v => 1 is lexiographically smallest

     @code cpp
     // dijkstra's:
     vector<int> dist(n+1, INF), from(n+1, -1);
     vector<bool> vis(n+1);
     priority_queue<pii> pq;
     dist[1] = 0;
     pq.push(mp(0, 1));
     while(!q.empty()) {
        auto [z, v] = q.top(); q.pop();
        if (vis[v]) continue;
        vis[v] = true;
        for (auto u : adj[v]) {
             if (!vis[u.first] && z+u.second < dist[u.first]) {
                 dist[u.first] = z+u.second;
                 pq.push(dist[u.first], u.first);
             }
         }
     }
@end

